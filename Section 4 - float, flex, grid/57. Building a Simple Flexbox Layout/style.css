/* universal selector */

* {
  /* Global reset */
  margin: 0;
  padding: 0;
  /* If we want to apply box model border box to each element on the page so we put in universal selector */
  box-sizing: border-box;
  /* Now along with margin and padding this box model will aplly on every single element */
}

body {
  font-family: sans-serif;
  color: #444;

  border-top: 10px solid #1098ad;
  /* если обнулить margin тут, то это свойство не применится к p */
  /* margin: 0; */
}

.container {
  width: 1200px;
  margin: 0 auto;
  position: relative;
}


.main-header {
  background-color: #f7f7f7;
  /* padding: 20px - top and bottom, 40px - left and right */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

.post-header {
  margin-bottom: 40px;
}


aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1090ad;
  border-bottom: 5px solid #1090ad;
  padding: 50px 40px;
  /* box-sizing: border-box; */
}


nav a {
 display: inline-block;
 margin-right: 10px;
 /* margin-top: 10px; */
}

nav a:last-child {
  margin-right: 0;
 }

article {
  margin-bottom: 60px;
}



h1, h2, h3 {
  color: #1090ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h2 {
  font-size: 36px;
  margin-bottom: 30px;
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: yellow;
  font-size: 14px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

h3 {
  font-size: 26px;
  margin-bottom: 20px;
  margin-top: 40px;
}

/* Adjacent sibling */

/* h3 + p::first-line {
  color: red;
} */

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 20px;
}

p {
  font-size: 18px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul, 
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

.related {
  margin-left: 0;
}

li {
  font-size: 16px;
  margin-bottom: 10px;
}

li:last-child {
  margin-bottom: 0;
}

/* footer p {
  font-size: 14px;
} */

/* header p {
  font-style: italic;
} */

#author {
  font-style: italic;
  font-size: 14px;
}

#copyright {
  font-size: 14px;
}

.related-author {
  font-size: 14px;
  font-weight: bold;
}

aside li {
  list-style: none;
}


/* .first-li {
  font-weight: bold;
} */

/* first child */
/* li:first-child {
  font-weight: bold;
} */


/* last child */
/* li:last-child {
  font-style: italic;
} */


/* necessary (custom) child */
/* li:nth-child(2) {
  color: red;
} */

/* можно указать четные или нечетные элементы, пример с нечетными - odd - нечетные, even - четные */
/* li:nth-child(odd) {
  color: red;
} */


/* Styling links */
a {
  color: #1090ad;
  text-decoration: none;
}


a:visited {
  color: #1090ad;
  text-decoration: none;
}

a:hover {
  color: orangered;
  text-decoration: underline dotted orangered;
}

a:active {
  background-color: black;
}

.post-img {
  width: 100%;
  height: auto;
}

button {
  font-size: 18px;
  padding: 20px;
  position: absolute;
  bottom: 50px;
  right: 50px;

}








/* * ----- > LAYOTS <----- * */






/* * --- FLOAT */

/* .author-img {
  float: left;
  margin-bottom: 20px;
}

.author {
  margin-top: 10px;
  margin-left: 20px;
  float: left;
}

h1 {
  float: left;
}

nav {
  float: right;
} */


/* We can clear one of two sides (left, right), or both simultaniously */
/* .clear {
  clear: both;
} */


/* alternative way to create new div element with class clear. We add class clearfix to parent element, that collapsed */
/* what this kind of pseudo element will do, it insert a new element in the end of container */
.clearfix::after {
  /* clear: both; */
  /* this element only appears if we define the content property */
  /* but we leave the content property with empty text */
  /* if we don't add content property the element won't appear and we won't be able to apply clearfix functionality  */
  /* content: ""; */
  /* we need to set display propery to value block, clear opportunity works only with block elements */
  /* display: block; */
}

/* --- Creating a simple float layout */

/* we need to change the width of article and aside container. Now they occupay all width of parent element, but we naeed to place it side by side, so they summary width need to be equal width of parent element */

/* Container width is 1100 ps, aside width plus article width is exactly 1100 px */
article {
  /* we decrise a bit size from 800 px to 750 to add some gap between aside and article */
  /* background-color: green; */
  /* width: 850px; */
  /* to put elements side by side we set a float property (we define a float property) */
  /* float: left; */
}

aside {
  /* background-color: red; */
  /* width: 300px;
  float: right; */
}

footer {
  /* background-color: yellow; */
  /* clear: both; */
}







/* * --- FLEX */

.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.author-box {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.author {
  margin-bottom: 0;
  margin-left: 15px;
}

.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 30px;
}

.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

.related-link {
  font-size: 17px;
  font-size: bold;
  font-style: normal;
  margin-bottom: 5px;
  display: block;
}

.row {
  display: flex;
  align-items: flex-start;
  gap: 75px;
  margin-bottom: 60px;
}

article {
  /* ставим flex на 1 и это значит что элемент займет все доступное место */
  flex: 1;
  margin-bottom: 0;
}

aside {
  flex: 0 0 300px;
}
