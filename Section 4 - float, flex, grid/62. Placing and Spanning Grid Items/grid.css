.el--1 {
  background-color: blueviolet;
}
.el--2 {
  background-color: orangered;
}
.el--3 {
  background-color: green;
  height: 150px;
}
.el--4 {
  background-color: goldenrod;
}
.el--5 {
  background-color: palevioletred;
}
.el--6 {
  background-color: steelblue;
}
.el--7 {
  background-color: yellow;
}
.el--8 {
  background-color: crimson;
}

.container--1 {
  /* STARTER */
  font-family: sans-serif;
  background-color: #ddd;
  font-size: 30px;
  margin: 30px;

  /* CSS GRID */
  /* In GRID system we have grid container and grid items, it pretty similar logic as in flex system */
  display: grid;
  /* we need to define two dimensial layout: columns and rows */
  /* we can define as many widths as we want */
  /* this code grid-template-columns: 250px 150px; generates 1 row and two columns */

  /* gird system peovide us ability to use fr(fractional or fraction) units instead pixels specifing columns width. It allows us ti create flex columns and rows */
  /* we change pixels on fr */
  /* grid-template-columns: 200px 200px 1fr 1fr; */

  /* in this case all columns have the same size, because we specifi each of them the same value */
  /* grid-template-columns: 1fr 1fr 1fr 1fr; */

  /* we can set the value auto to one column and it takes the size exactly it is neccessary for its content */
  /* grid-template-columns: 1fr 1fr 1fr auto; */

  /* easear way to declare size for multuple columns */
  grid-template-columns: repeat(4, 1fr);


  /* we can specify height of the rows */
  /* grid-template-rows: 300px 200px; */
  /* fr units are also available in rows */
  grid-template-rows: 1fr 1fr;
  /* grid-template-rows: 1fr auto; */
  /* height: 500px; */

  /* only way to define space between grid items is using gap property. Margins not going to work */
  /* gap: 20px; */

  /* we can define separate values for column and gaps */
  column-gap: 30px;
  row-gap: 60px;


}



/* replacing grid-item to another position */
.el--8 {
  /* we spicify number of column start and end  */
  grid-column: 2 / 3;
  grid-row: 1 / 2;
}



.el--2 {
  /* we spicify number of column start and end  */
  grid-column: 1 / 2;
  /* grid-column: 1 / span 2; */
  /* grid-column: 1 / -1; */
  grid-row: 2 / 3;
}


/* spanning also work for rows */
.el--4 {
  grid-column: 4/5;
  grid-row: 1/ span 2;
}




.container--2 {
  display: none;
  /* STARTER */
  font-family: sans-serif;
  background-color: black;
  font-size: 40px;
  margin: 100px;

  width: 1000px;
  height: 600px;

  /* CSS GRID */
}